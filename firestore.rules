/**
 * @file Firebase Security Rules for Firestore.
 *
 * @Core Philosophy: This ruleset prioritizes secure access to user-generated content and open access to public content.
 *   - User-submitted enquiries are restricted to the submitting user.
 *   - Workshops and Products are publicly readable, but write access is not granted in these rules.
 *   - Workshop registrations are linked to specific workshops and are publicly readable but can't be created or modified.
 *
 * @Data Structure:
 *   - /enquiries/{enquiryId}: Stores user enquiries. Enquiry documents contain a 'userId' field.
 *   - /workshops/{workshopId}: Stores workshop information. Publicly readable.
 *   - /workshops/{workshopId}/registrations/{registrationId}: Stores registration information for workshops. Publicly readable.
 *   - /products/{productId}: Stores product information. Publicly readable.
 *
 * @Key Security Decisions:
 *   - Enquiries are secured using an ownership model, where only the user who created the enquiry can read or modify it.
 *   - Listing of enquiries is restricted to the owner.
 *   - Workshops and products are publicly readable but not writable via the client.
 *   - Workshop registrations are publicly readable but not writable via the client.
 *   - No data shape validation is enforced beyond what's necessary for authorization (owner checks).
 *
 * @Denormalization for Authorization:
 *   - The 'enquiries' collection stores a 'userId' field on each document, enabling direct ownership checks.
 *
 * @Structural Segregation:
 *   - There is no structural segregation, so a single collection is used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Manages user enquiries, ensuring only the owner can read, create, update, or delete them.
     * @path: /enquiries/{enquiryId}
     * @allow: (create) - User 'user_abc' creates an enquiry with enquiry.userId == 'user_abc'.
     * @deny: (create) - User 'user_abc' tries to create an enquiry with enquiry.userId == 'user_def'.
     * @deny: (update) - User 'user_def' attempts to update an enquiry owned by 'user_abc'.
     * @principle: Enforces document ownership for all operations on enquiries.
     */
    match /enquiries/{enquiryId} {
      function isSignedIn() { return request.auth != null; }
      function isOwner(userId) { return isSignedIn() && request.auth.uid == userId; }
      function isExistingOwner(userId) { return isOwner(userId) && resource != null; }

      allow get: if isOwner(resource.data.userId); // Only owner can get
      allow list: if isOwner(request.auth.uid); // Only owner can list

      allow create: if isOwner(request.resource.data.userId); // Only owner can create
      allow update: if isExistingOwner(resource.data.userId); // Only owner can update
      allow delete: if isExistingOwner(resource.data.userId); // Only owner can delete
    }

    /**
     * @description: Manages workshops.  Anyone can read, but only the backend can create, update, or delete.
     * @path: /workshops/{workshopId}
     * @allow: (get) - Any user can read workshop details.
     * @allow: (list) - Any user can list workshops.
     * @deny: (create) - User 'user_abc' tries to create a workshop.
     * @principle: Allows public read access to workshop information. Write access is not granted.
     */
    match /workshops/{workshopId} {
      allow get: if true; // Anyone can get
      allow list: if true; // Anyone can list

      allow create: if false; // No one can create
      allow update: if false; // No one can update
      allow delete: if false; // No one can delete
    }

    /**
     * @description: Manages workshop registrations.  Anyone can read, but only the backend can create, update, or delete.
     * @path: /workshops/{workshopId}/registrations/{registrationId}
     * @allow: (get) - Any user can read registration details.
     * @allow: (list) - Any user can list registrations for a workshop.
     * @deny: (create) - User 'user_abc' tries to create a registration.
     * @principle: Allows public read access to registration information. Write access is not granted.
     */
    match /workshops/{workshopId}/registrations/{registrationId} {
      allow get: if true; // Anyone can get
      allow list: if true; // Anyone can list

      allow create: if false; // No one can create
      allow update: if false; // No one can update
      allow delete: if false; // No one can delete
    }

    /**
     * @description: Manages products.  Anyone can read, but only the backend can create, update, or delete.
     * @path: /products/{productId}
     * @allow: (get) - Any user can read product details.
     * @allow: (list) - Any user can list products.
     * @deny: (create) - User 'user_abc' tries to create a product.
     * @principle: Allows public read access to product information. Write access is not granted.
     */
    match /products/{productId} {
      allow get: if true; // Anyone can get
      allow list: if true; // Anyone can list

      allow create: if false; // No one can create
      allow update: if false; // No one can update
      allow delete: if false; // No one can delete
    }
  }
}