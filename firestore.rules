
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    function isAdmin() {
      // The admin user has full access to all data.
      return request.auth != null && request.auth.uid == "jy39QM0BtDROwlkLPZvFFV4H8mk2";
    }

    function isOwner(userId) {
      // Check if the requesting user is the owner of the document.
      return request.auth != null && request.auth.uid == userId;
    }

    // Function to validate the structure of an incoming order.
    function isValidOrder(orderData) {
      return orderData.userId == request.auth.uid &&
        orderData.productId is string &&
        orderData.productDetails is map &&
        orderData.productDetails.brand is string &&
        orderData.productDetails.model is string &&
        orderData.productDetails.price is number &&
        orderData.shippingAddress is map &&
        orderData.shippingAddress.line1 is string &&
        orderData.shippingAddress.city is string &&
        orderData.shippingAddress.state is string &&
        orderData.shippingAddress.zipCode is string &&
        orderData.shippingAddress.country is string &&
        orderData.shippingAddress.type is string &&
        orderData.estimatedDeliveryDate is timestamp &&
        (
          (orderData.paymentMethod == 'COD' &&
           orderData.status == 'Placed' &&
           orderData.pricePaid == 0 &&
           !('paymentId' in orderData)) ||

          (orderData.paymentMethod == 'Online' &&
           orderData.status == 'Confirmed' &&
           orderData.pricePaid > 0 &&
           orderData.paymentId is string)
        );
    }

    // --- Public Collections ---

    match /products/{productId} {
      allow read: if true;
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || (
        request.auth != null &&
        request.resource.data.stock == resource.data.stock - 1 &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock'])
      );
    }

    match /services/{serviceId} {
      allow read: if resource.data.status == 'Active' || isAdmin();
      allow write: if isAdmin();
    }
    
    match /offers/{offerId} {
      allow read: if resource.data.status == 'Active' || isAdmin();
      allow write: if isAdmin();
    }
    
    match /enquiries/{enquiryId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    // --- Users Collection & Subcollections ---

    match /users/{userId} {
      // User can create their own doc on signup.
      allow create: if isOwner(userId);
      
      // Admins can read any profile. Users can read their own.
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can ONLY update their displayName and phone. Admins can update accountStatus.
      allow update: if 
        (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'phone'])) ||
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['accountStatus']));

      // Subcollections within a user document
      match /addresses/{addressId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }

      match /appointments/{appointmentId} {
        allow create, read: if isOwner(userId) || isAdmin();
        allow update: if 
          (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'paymentId', 'pricePaid'])) ||
          (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']));
        allow delete: if false; // Keep appointment history
      }
      
      match /orders/{orderId} {
        // A user can create an order IF the data is valid
        allow create: if isOwner(userId) && isValidOrder(request.resource.data);
        allow read: if isOwner(userId) || isAdmin();
        // Admins can update status (e.g., shipped). Users can update only to cancel.
        allow update: if isAdmin() || 
          (isOwner(userId) && request.resource.data.status == 'Cancelled' && resource.data.status != 'Delivered');
        // Only admins can delete orders to preserve history.
        allow delete: if isAdmin();
      }
    }
    
    // --- Collection Group Rules ---

    // Admin collectionGroup access to appointments across users
    match /{path=**}/appointments/{appointmentId} {
        allow read: if isAdmin();
    }
    
    // Admin collectionGroup access to orders across users
    match /{path=**}/orders/{orderId} {
        allow get, list: if isAdmin();
    }
  }
}
