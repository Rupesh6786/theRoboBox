/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing ownership and role-based access control.
 * All write operations require authentication and proper authorization.
 * Data validation is relaxed to facilitate rapid prototyping, focusing only on
 * authorization-critical fields.
 *
 * Data Structure:
 * - /enquiries/{enquiryId}: Stores user enquiries. Accessible to the submitting user and potentially admins.
 * - /workshops/{workshopId}: Stores workshop details. Publicly readable, but writable only by authenticated users.
 * - /workshops/{workshopId}/registrations/{registrationId}: Stores user registrations for workshops. Only accessible to the registering user.
 *
 * Key Security Decisions:
 * - Users can only create enquiries for themselves.
 * - Workshops are publicly readable, but only authenticated users can create, update, or delete them.
 * - Workshop registrations are limited to the registering user.
 * - List operations are generally restricted to owners or disabled for private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user enquiries.
     * @path /enquiries/{enquiryId}
     * @allow (create) User with auth.uid "user_abc" can create an enquiry with userId "user_abc".
     * @deny (create) User with auth.uid "user_xyz" cannot create an enquiry with userId "user_abc".
     * @allow (get) Any authenticated user can read an enquiry (for now, assuming some level of public access or shared role).
     * @deny (update, delete) Only the user who created the enquiry can update or delete it.
     * @principle Enforces user ownership for enquiry creation and restricts updates/deletes to the owner.
     */
    match /enquiries/{enquiryId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Manages access to workshop documents.
     * @path /workshops/{workshopId}
     * @allow (get, list) Anyone can read the workshops.
     * @allow (create) Any authenticated user can create a workshop.
     * @deny (update, delete) Only the user who created the workshop can update or delete it.
     * @principle Allows public read access to workshops but restricts write access to authenticated users only.
     */
    match /workshops/{workshopId} {
      allow get, list: if true;

      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces access control for workshop registrations.
     * @path /workshops/{workshopId}/registrations/{registrationId}
     * @allow (create) User with auth.uid "user_abc" can register for a workshop with userId "user_abc".
     * @deny (create) User with auth.uid "user_xyz" cannot register for a workshop with userId "user_abc".
     * @allow (get) Any authenticated user can read his/her registration (assuming some level of public access or shared role).
     * @deny (update, delete) Only the user who registered for the workshop can update or delete their registration.
     * @principle Enforces user ownership for workshop registration and restricts updates/deletes to the owner.
     */
    match /workshops/{workshopId}/registrations/{registrationId} {
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }

    // ---- Helper functions ----

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}